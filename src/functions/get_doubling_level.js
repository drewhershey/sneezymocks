const { max, floor, sqrt } = Math;

// Results of running get_doubling_level on every level from
// 1 - 50
const DOUBLING_LEVELS = {
  1: 0.390_000_000_000_000_2,
  2: 0.730_000_000_000_000_4,
  3: 1.030_000_000_000_000_7,
  4: 1.300_000_000_000_001,
  5: 1.540_000_000_000_001_1,
  6: 1.760_000_000_000_001_3,
  7: 1.970_000_000_000_001_5,
  8: 2.149_999_999_999_998,
  9: 2.319_999_999_999_994_5,
  10: 2.479_999_999_999_991,
  11: 2.629_999_999_999_988,
  12: 2.759_999_999_999_985,
  13: 2.889_999_999_999_982_4,
  14: 3.009_999_999_999_98,
  15: 3.119_999_999_999_977_5,
  16: 3.219_999_999_999_975_3,
  17: 3.319_999_999_999_973,
  18: 3.419_999_999_999_971,
  19: 3.499_999_999_999_969_4,
  20: 3.589_999_999_999_967_4,
  21: 3.659_999_999_999_966,
  22: 3.739_999_999_999_964_2,
  23: 3.809_999_999_999_962_7,
  24: 3.879_999_999_999_961_3,
  25: 3.939_999_999_999_96,
  26: 3.999_999_999_999_958_7,
  27: 4.059_999_999_999_958,
  28: 4.119_999_999_999_957,
  29: 4.169_999_999_999_955_5,
  30: 4.219_999_999_999_954_5,
  31: 4.269_999_999_999_953,
  32: 4.319_999_999_999_952,
  33: 4.369_999_999_999_951,
  34: 4.409_999_999_999_95,
  35: 4.449_999_999_999_949_6,
  36: 4.489_999_999_999_949,
  37: 4.529_999_999_999_948,
  38: 4.569_999_999_999_947,
  39: 4.609_999_999_999_946,
  40: 4.639_999_999_999_945_5,
  41: 4.679_999_999_999_945,
  42: 4.709_999_999_999_944,
  43: 4.739_999_999_999_943,
  44: 4.769_999_999_999_943,
  45: 4.799_999_999_999_942,
  46: 4.829_999_999_999_941_5,
  47: 4.859_999_999_999_941,
  48: 4.889_999_999_999_94,
  49: 4.909_999_999_999_94,
  50: 4.939_999_999_999_939,
};

function getDoublingLevel(realLevel) {
  const RESOLUTION = 0.01;
  const mobDoubleTable = new Map();

  for (let k = 0; ; k += RESOLUTION) {
    const perc = (0.6 - k * 0.03) / (0.6 + k * 0.03);
    const lbla = sqrt(2 * perc) - 1;
    const lookupLev = floor(k / lbla / RESOLUTION);
    mobDoubleTable.set(lookupLev, k);
    if (floor(lookupLev * RESOLUTION) >= 50) break;
  }

  let levelToFind = floor(max(realLevel, 1) / RESOLUTION);
  let kLev = 0;
  while (kLev === 0) {
    if (mobDoubleTable.has(levelToFind)) {
      kLev = mobDoubleTable.get(levelToFind);
    } else {
      levelToFind -= 1;
    }
  }
  return kLev <= 0 ? 1 : kLev;
}

module.exports = { DOUBLING_LEVELS, getDoublingLevel };
